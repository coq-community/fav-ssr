---
fullname: Functional Data Structures and Algorithms in SSReflect
shortname: fav-ssr
opam_name: coq-fav-ssr
organization: coq-community
community: true
action: true
branch: trunk
dune: false

synopsis: A port of the Functional Data Structures and Algorithms book to Coq/SSReflect

description: |-
  A port of the book https://functional-algorithms-verified.org/ to Coq/SSReflect.

  The book was previously called "Functional Algorithms Verified", hence the FAV acronym.

authors:
- name: Alex Gryzlov
  initial: true

maintainers:
- name: Alex Gryzlov
  nickname: clayrat

opam-file-maintainer: palmskog@gmail.com

opam-file-version: dev

license:
  fullname: MIT license
  identifier: MIT

supported_coq_versions:
  text: 8.18 to 8.20
  opam: '{>= "8.18" & < "8.21"}'

tested_coq_opam_versions:
- version: '2.3.0-coq-8.20'
  repo: 'mathcomp/mathcomp'
- version: '2.3.0-coq-8.19'
  repo: 'mathcomp/mathcomp'
- version: '2.3.0-coq-8.18'
  repo: 'mathcomp/mathcomp'

dependencies:
- opam:
    name: coq-mathcomp-ssreflect
    version: '{>= "2.3" & < "2.4"}'
  description: |-
    [MathComp ssreflect](https://math-comp.github.io) 2.3.0
- opam:
    name: coq-mathcomp-algebra
  description: |-
    [MathComp algebra](https://math-comp.github.io)
- opam:
    name: coq-equations
    version: '{>= "1.3"}'
  description: |-
    [Equations](https://github.com/mattam82/Coq-Equations) 1.3 or later

namespace: favssr

keywords:
- name: program verification

categories:
- name: Computer Science/Decision Procedures and Certified Algorithms/Correctness proofs of algorithms

build: |-
  ## Building instructions

  To build manually, do:
  ```shell
  make   # or make -j <number-of-cores-on-your-machine>
  ```

documentation: |-
  ## Contents

  1. [Basics](src/basics.v)
  ### Part I: Sorting and Selection
  2. [Sorting](src/sorting.v)
  3. [Selection](src/selection.v)
  ### Part II: Search Trees
  4. [Binary Trees](src/bintree.v)
  5. [Binary Search Trees](src/bst.v)
  6. [Abstract Data Types](src/adt.v)
  7. [2-3 Trees](src/twothree.v)
  8. [Red-Black Trees](src/redblack.v)
  9. [AVL Trees](src/avl.v)
  10. [Beyond Insert and Delete: \cup, \cap and -](src/beyond.v)
  11. [Arrays via Braun Trees](src/braun.v)
  12. [Tries](src/trie.v)
  13. [Region Quadtrees](src/quadtree.v)
  ### Part III: Priority Queues
  14. [Priority Queues](src/priority.v)
  15. [Leftist Heaps](src/leftist.v)
  16. [Priority Queues via Braun Trees](src/braun_queue.v)
  17. [Binomial Heaps](src/binom_heap.v)
  ### Part IV: Advanced Design and Analysis Techniques
  18. Dynamic Programming
  19. Amortized Analysis
  20. Queues
  21. Splay Trees
  22. Skew Heaps
  23. Pairing Heaps
  ### Part V: Selected Topics
  24. Knuth–Morris–Pratt String Search
  25. [Huffman’s Algorithm](src/huffman.v)
  26. Alpha-Beta Pruning
---
